SUBROUTINE LISTID(X_OUTDATA, X_PARAMS)

WhoAmI = "Main Program XTOOLSUB"
LogStmt = @DATE:" From ":WhoAmI
X_OUTDATA = ''
X_ERROR = 0
X_CODE = 3
GOSUB InitLOG
GOSUB ReadDICT
*PRINT "X_OUTDATA=":X_OUTDATA
RETURN
***********************************************************************
*
* Get ALL FILES under one ACCOUNT on this server,
* trying to get file type as well.
*     no input, 
*
***********************************************************************
GetFiles:
WhoAmI = "GetFiles"
LogStmt = @DATE:" From ":WhoAmI
GOSUB InitLOG
open 'md' to md.file else stop
 execute 'select md with a1 = "d]" ' capturing junk
 select md.file to md.list; *redirect to the list
eof=0
loop
  readnext ID from md.list else eof=1
until eof do   
   X_OUTDATA<-1> = ID
repeat
GOSUB InitLOG
RETURN

***********************************************************************
*
* Subroutine to read DICT info
*     input: filename
*  
***********************************************************************
ReadDICT:
WhoAmI = "ReadDICT"
LogStmt = @DATE:" From ":WhoAmI
FILE_NAME = TRIM(X_PARAMS)
*print "file name passed=":FILE_NAME
FLAG=0

c = 0
loop
   x = c 
   while x < 256 do
   *print "x=":x:"  ASCII value=":char(x)
   c = c + 1
repeat

open 'dict',FILE_NAME  to dict.file else stop
   statement = 'select dict ':FILE_NAME:'  with a1 ne "D]" '
   print statement
    execute statement   CAPTURING OUTPUT
   *execute 'select dict WIN.CUST with a1 ne "D]" ' CAPTURING OUTPUT
    select dict.file to dict.list; *redirect output to the list
eof=0

loop
  readnext ID from dict.list else eof=1
   
 until eof do
  X_OUTDATA<-1>=ID  
repeat
print "X_OUTDATA=":X_OUTDATA
GOSUB InitLOG
RETURN
**************************************************
* Debugging log file
*************************************
InitLOG:
* 34295 If Logging is @TRUE then log output
Logging = 1
IF Logging THEN
     LogFilePath = "C:\tmp\" 
     OPEN LogFilePath TO LogFile  then
         LogStmt = LogStmt:" Open the LogFilePath  ":LogFilePath
     end else  
         LogStmt =LogStmt:" Couldn't Open the LogFilePath  ":LogFilePath
     end
     WRITEV  "Start logging at ":OCONV(DATE(),'D2/'):" ":OCONV(TIME(),'MTHS') ON LogFile,"TXTOOLSUB.LOG", -1
     rec = LogStmt :" Code ":X_CODE:", Out ":X_OUTDATA
     WRITEV rec ON LogFile,"TXTOOLSUB.LOG", -1
END
RETURN
RETURN