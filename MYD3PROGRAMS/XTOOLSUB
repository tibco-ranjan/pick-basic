SUBROUTINE XTOOLSUB(X_CODE, X_PARAMS, X_OUTDATA, X_ERROR)
*******************************************************************************
*
*       Server subroutine for XMAP TOOL
*
*       Module%M%Version%I% Date%H%
*
*	Rocket Confidential
*	OCO Source Materials
*	Copyright (C) Rocket software, 2020
*
*
*******************************************************************************
*
* DESCRIPTION:
*
*	This subroutine contains all the server codes for XMAPTOOL
*
*	Input arguments:  Action  - key for action to be taken
*			  Params  - parameters required by the
*				    particular function being
*				    performed, field mark separated
*
*	Output arguments: OutData - any output from the requested
*				    function, field mark separated
*			  Error   - error code or 0 if no error
*
*****************************************************************************
include dm,bp,includes sysID.inc

COMMON /AAA/ Logging, LogFile, VFLAG, ClearXOUTDATA, LogFilePath
WhoAmI = "Main Program XTOOLSUB"
X_ERROR = 0
ClearXOUTDATA = 0
X_CODE = X_CODE + 1

*Getting the System OS info
imp=SYSTEM(38)
IF imp<sys$host>=sys$unix THEN
    * UNIX system
     OS.TYPE = "UNIX"
     OS.SEP = "/"
 END ELSE
    * Windows NT system
     OS.TYPE = "NT"
     OS.SEP = "\"
END

*Check of Any Error : Not Equal : ne # <>
IF X_ERROR <> 0 THEN
 RETURN
END

*Envokes the respective local subroutine corresponding to passed X_CODE value
 * INITIALISE,          ;* Get essentinal systme information.
 * GetAccounts,		    ;* Get all accounts in this server.
 * LogtoAccount,		;* Logto one account.
 * GetFiles,            ;* Get all data table under this acct.
 * ReadDICT,            ;* Read DICT info
 * PREINITIALISE,		;* execute initial commands, before doing anything else.
ON X_CODE GOSUB INITIALISE,
    GetAccounts,	
    LogtoAccount,		
    GetFiles,			
    GetDict,			
    OSBrowse,			
    ToXMAP1,
    ToXMAP2,
    ReadXMAP,			
    WriteXMAP,			
    GetDTDs,			
    ReadDTD,
    GetXMAPs,			
    CheckXMAP,			

    Readitems,			
    ClearTable,			
    DB2XML,			
    XML2DB,			
                    
    GetXSDs,		
    ReadXSD,		
                    
    FileLock,		
    ReleaseFileLock,
                    
    GetDrivers,		
                    
    ReadOSFile,		
    WriteOSFile,		
    WriteOSFileForce,	
    CopyOSFile,			
    CopyOSFileForce,	

    GetPlatform,		

    RemoveFiles,		
    NewAcct,			
    DeleteAcct,			

    CreateFile,			
    ReadDICT,			
    WriteDICT,			

    ReadFile,			
    UpdateFile,			
    Deleteitem,			
    Additem,			

    GenDICT,		
    GenXSD,			
    CopyFile,		

    GetXMLFiles,	
    CheckID,		

    Iconv,			
    Oconv,			

    GetCTLGFiles,		
    GetParas,			

    GetBPFiles,			
    ReadBPFile,			
    WriteBPFile,		

    GetDIRitemordList,	
    ReadDIRitemord,		
    WriteDIRitemord,		
    CompileDIRitemord,	
    CatalogDIRitemord,	
    ListUsers,			
    GetMultiDIRitemordLis,
    PREINITIALISE,		
    GetAccountFlavor,	

    GetToolVersion,		
    OSCreateFolder,		

    SetNoConvert,		
    GetHome,			

    GetFileList,		
    GetFileTypeInfo,	
    SetRCPToolName,		
    LocateCTLGSource,	
    LmeCheck,
    LmeBridgeCall,  
    STARTWS,			
    STOPWS,			    
    Unused

GOSUB InitLOG
RETURN

***********************************************************************
*
* PRE_INITIALISE is called only when there're some initial commands to execute
*
***********************************************************************
PREINITIALISE:
    * logging
    Logging = 1
    PRINT "In the PREINITIALISE local call"
    INICMDS = TRIM(X_PARAMS<1>)

    IF INICMDS <> "" THEN
	GOSUB ExecInitialCommands
    END

RETURN


ExecInitialCommands:

NO_CMDS = DCOUNT(INICMDS, CHAR(10))

FOR CMDIDX = 1 TO NO_CMDS 
	ONECMD = FIELD(INICMDS, CHAR(10), CMDIDX)
	ONECMD = TRIM(ONECMD)
	IF ONECMD <> "" THEN
		X_OUTDATA = X_OUTDATA:CHAR(10):ONECMD

		CMD_PREF = FIELD(ONECMD, ' ', 1)
		CMD_REST=FIELD(ONECMD, ' ', 2, 999)
		
		IF CMD_PREF = "PERFORM" THEN
			PERFORM CMD_REST ; *CAPTURING outX
		END ELSE IF CMD_PREF = "EXECUTE" THEN
			EXECUTE CMD_REST CAPTURING outX
		END ELSE 
			EXECUTE ONECMD CAPTURING outX
		END
		
		X_OUTDATA = X_OUTDATA:CHAR(10): CHANGE(outX, @FM, CHAR(10)):CHAR(10)
	END
	
NEXT CMDIDX

RETURN

***********************************************************************
*
* Get and Set environment before deal the real functions
* As of now just printing the system info 
* This local subrouitine will change as per the requirement.
*
***********************************************************************
INITIALISE:

*Get Host Details
imp = SYSTEM(100)
PRINT "Systme Info  ": imp

*Set Syestem var
info=SYSTEM(38)
IF info<sys$host>=sys$unix THEN
   * UNIX system
     OS.TYPE = "UNIX"
     OS.SEP = "/"
 END ELSE
   * Windows NT system
     OS.TYPE = "NT"
     OS.SEP = "\"
END

PRINT "OS=":OS.TYPE
***********************************************************************
*
* Get ALL ACCOUNTS on this server
*     input: none
*
***********************************************************************
GetAccounts:
OPEN 'mds' TO mds.file ELSE STOP
  EXECUTE 'SELECT mds,, WITH a1 = "d]" OR WITH a1 = "q]" AND WITH a2 = "fsi:]"' CAPTURING accounts
  SELECT mds.file TO mds.list; *  saving the select output account list into the mds.list
  EOF=0
LOOP
  READNEXT ID FROM mds.list ELSE EOF=1; * Read the ID iteretively.
UNTIL EOF DO
   X_OUTDATA<-1> = ID:@VM:ID ; * Need to parse for @VM while reading.
REPEAT

CLOSE mds.file
RETURN

***********************************************************************
*
* Goto ONE special ACCOUNT
*     input: account name
*
***********************************************************************
LogtoAccount:
WhoAmI = "GetFiles"
LogStmt = @DATE:"  ":"From ":WhoAmI

ACCT_ID = TRIM(X_PARAMS)
PRINT "ACC_ID=":" ":ACCT_ID 

X_OUT = ""
ExLine = "LOGTO ":ACCT_ID: " (f"     
GOSUB ExecWithCapture
X_OUT = TRIM(X_OUT)
 
*The (f option supress any output, does the login silently 
IF X_OUT <> "" THEN
      X_ERROR = ETOOL.WRONGPATH
      X_OUTDATA = "Invalid account ":ACCT_ID
      RETURN      
END ELSE
      ExLine="WHO "
      GOSUB ExecWithCapture
      X_OUTDATA = 'LOGTO ':ACCT_ID:' was successful'      
END   

PRINT "Logging the account details ":X_OUTDATA 
GOSUB InitLOG

RETURN
***********************************************************************
*
* Get ALL FILES under one ACCOUNT on this server,
* trying to get file type as well.
*     no input, 
*
***********************************************************************
GetFiles:

WhoAmI = "GetFiles"
LogStmt = @DATE:"  ":"From ":WhoAmI

OPEN 'md' TO md.file ELSE STOP
 EXECUTE 'SSELECT md WITH a1 = "d]" ' CAPTURING OUTPUT
 SELECT md.file TO md.list; * Rediitemting to list
EOF=0

LOOP
  READNEXT ID FROM md.list ELSE EOF=1; * Getting the files from list.
UNTIL EOF DO   
   X_OUTDATA<-1> = ID:@VM:ID ; * Formatig to read.
REPEAT
CLOSE md.file

GOSUB InitLOG
RETURN

***********************************************************************
*
* Subroutine to read DICT info
*     input: filename
*  
***********************************************************************
ReadDICT:
WhoAmI = "ReadDICT"
LogStmt = @DATE:" From ":WhoAmI
FILE_NAME = TRIM(X_PARAMS)
FLAG=0

OPEN 'dict',FILE_NAME  TO dict.file ELSE STOP
   statement = 'SSELECT DICT ':FILE_NAME:'  WITH a1 NE "d]"'   
   EXECUTE statement CAPTURING OUTPUT
   SELECT dict.file to dict.list; *rediitemt output to the list
EOF=0
LOOP
  READNEXT ID FROM dict.list ELSE eof=1
  WHILE eof NE 1 DO
 
    READ item FROM dict.file,ID THEN       
   
    *Used char(251)  as a @TM
    *Used char(254)  as a @FM    
    *FieldID = ID
    *FieldType = item<1>
    *FieldLoc = item<2>
    *FieldConv = item<7>
    *FieldName = item<3>
    *FieldFormat = item<10>:item<9>    
    *FieldAssoc = item<4>
    *FieldCorrelative = item<8>    
    
    IF FLAG THEN  
        X_OUTDATA = X_OUTDATA:char(251):ID:char(254):item<1>:char(254):item<2>:char(254):item<7>:char(254):item<3>:char(254):item<10>:item<9>:char(254):item<4>:char(254):item<8>              
     END ELSE        
        X_OUTDATA = ID:char(254):item<1>:char(254):item<2>:char(254):item<7>:char(254):item<3>:char(254):item<10>:item<9>:char(254):item<4>:char(254):item<8>
        FLAG = 1
    END
   END
REPEAT

CLOSE dict.file
GOSUB InitLOG
RETURN
**********************************************************************
* Get Cataloged files 
**********************************************************************
GetCTLGFiles:
CTLGFlag = TRIM(X_PARAMS)

WhoAmI = "GetCTLGFiles"
LogStmt = @DATE:"  ":"From ":WhoAmI

OPEN 'md' TO md.file ELSE STOP
 EXECUTE 'sselect md v/cat with v/type = "vr""VR" and with v/cat ' CAPTURING OUTPUT
 SELECT md.file TO md.list; * Rediitemting to list
EOF=0

LOOP
  READNEXT ID FROM md.list ELSE EOF=1; * Getting the files from list.
UNTIL EOF DO
   ID=TRIM(ID)   
   X_OUTDATA<-1> = ID
REPEAT
CLOSE md.file

GOSUB InitLOG
RETURN

************************************************************************
*
*  Execute an ECL command, put the result into LIST 0
*
************************************************************************
ExecECL:
    ECHO ON 
    PRINT "ExLine= ":ExLine
    EXECUTE ExLine
    ECHO OFF
    ECHO ON
RETURN

 **********************************************************************
*
*  Execute an ECL command, put the result into LIST 0
*
************************************************************************    
ExecWithCapture:
    ECHO ON
    PRINT "ExLine=":" ":ExLine
    EXECUTE ExLine CAPTURING X_OUT   
    PRINT "X_OUT=":" ":X_OUT
    ECHO OFF
    ECHO ON
RETURN


**************************************************
* Debugging log file
* As of now enabling logging true by default, 
* will make it configurable later on. 
**************************************************
InitLOG:

Logging = 1
IF Logging THEN  
  IF OS.TYPE = "UNIX" THEN
     LogFilePath = "/tmp/"
  END ELSE
     LogFilePath = "C:\tmp\"
  END
   
  *Get the Logging Path. 
  OPEN LogFilePath TO LogFile  then
    PRINT "Open the LogFilePath  ":LogFilePath
  end else  
    PRINT "Couldn't Open the LogFilePath  ":LogFilePath
  end
  
  *Start Logging with Current Date and timing in XTOOLSUB.LOG file.
  WRITEV  "Start logging at ":OCONV(DATE(),'D2/'):" ":OCONV(TIME(),'MTHS') ON LogFile,"XTOOLSUB.LOG", -1
  
  *Start writing the itemords in the log file.
  item = LogStmt :" Code ":X_CODE:", Para ":X_PARAMS:", Error ":X_ERROR:", Out ":X_OUTDATA
  WRITEV item ON LogFile,"XTOOLSUB.LOG", -1
     
  *Clear the X_OUTDATA if some ERROR is encountered.
  IF ClearXOUTDATA THEN
     X_OUTDATA = ''
     ClearXOUTDATA = 0
  END
  
END
RETURN

**************************************************
* As of now provided empty implementation for 
* most of the local subroutine, to make them 
* incline with the existing client.
**************************************************
GetDict:
RETURN
OSBrowse:
RETURN
ToXMAP1:
RETURN
ToXMAP2:
RETURN
ReadXMAP:
RETURN
WriteXMAP:
RETURN
GetDTDs:
RETURN
ReadDTD:
RETURN
GetXMAPs:
RETURN
CheckXMAP:
RETURN
Readitems:
RETURN
ClearTable:
RETURN
DB2XML:
RETURN
XML2DB:
RETURN
GetXSDs:
RETURN
ReadXSD:
RETURN
FileLock:
RETURN
ReleaseFileLock:
RETURN
GetDrivers:
RETURN
ReadOSFile:
RETURN
WriteOSFile:
RETURN
WriteOSFileForce:
RETURN
CopyOSFile:
RETURN
CopyOSFileForce:
RETURN
GetPlatform:
RETURN
RemoveFiles:
RETURN
NewAcct:
RETURN
DeleteAcct:
RETURN
CreateFile:
RETURN
WriteDICT:
RETURN
ReadFile:
RETURN
UpdateFile:
RETURN
Deleteitem:
RETURN
Additem:
RETURN
GenDICT:
RETURN
GenXSD:
RETURN
CopyFile:
RETURN
GetXMLFiles:
RETURN
CheckID:
RETURN
Iconv:
RETURN
Oconv:
RETURN
GetParas:
RETURN
GetBPFiles:
RETURN
ReadBPFile:
RETURN
WriteBPFile:
RETURN
GetDIRitemordList:
RETURN
ReadDIRitemord:
RETURN
WriteDIRitemord:
RETURN
CompileDIRitemord:
RETURN
CatalogDIRitemord:
RETURN
ListUsers:
RETURN
GetMultiDIRitemordLis:
RETURN
GetAccountFlavor:
RETURN
GetToolVersion:
RETURN
OSCreateFolder:
RETURN
SetNoConvert:
RETURN
GetHome:
RETURN
GetFileList:
RETURN
GetFileTypeInfo:
RETURN
SetRCPToolName:
RETURN
LocateCTLGSource:
RETURN
LmeCheck:
RETURN
LmeBridgeCall:
RETURN
STARTWS:
RETURN
STOPWS:
RETURN
Unused:
RETURN

RETURN ;*End of Main SUBROUTINE XTOOLSUB